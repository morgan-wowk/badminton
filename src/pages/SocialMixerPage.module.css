.Layout {
    display: grid;
    grid-template-rows: 18fr 2fr;
    gap: var(--common-gap);
}

:global(body),
:global(#root),
.Layout {
    margin: 0;
    height: 100vh;
}

.GameLayout {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    gap: 0.7rem var(--common-gap);
    margin: var(--common-gap) var(--common-gap) 0 var(--common-gap);
}

.GameLayout>.Court {
    background-color: white;
    border: 0.2rem solid black;
    border-radius: var(--common-radius);
    color: black;
    padding: var(--common-gap);
    position: relative;
}

.GameLayout>.Court:local {
    animation-name: global(border-angle-rotate);
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-duration: 4s;
}

.GameLayout>.OfframpGame {
    background-color: black;
    border: 0.2rem solid rgb(43 135 255);
    border-radius: var(--common-radius);
    color: white;
    font-size: 0.6rem;
    line-height: 0.6rem;
    padding: var(--common-gap);
    position: relative;
}

.OfframpGameEmpty {
    background-color: darkblue !important;
}

.OfframpGameInstruction:before {
    content: 'View previous games and record results in the top row.';
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    opacity: 0.8;
}


.GameLayout>.OnrampGame {
    background-color: #ffe100;
    border: 0.2rem solid black;
    border-radius: var(--common-radius);
    color: black;
    padding: var(--common-gap);
    position: relative;
}

.OnrampGameInstruction:before {
    content: 'Scan your member pass or use the mouse to join the queue.';
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: black;
    opacity: 0.8;
    font-size: 0.6rem;
    line-height: 0.6rem;
}

.RainbowBorder {
    border: 0.2rem solid transparent;
    --border-angle: 0deg;
    background: linear-gradient(black, black) padding-box,
        conic-gradient(from var(--border-angle),
            oklch(100% 100% 0deg),
            oklch(100% 100% 45deg),
            oklch(100% 100% 90deg),
            oklch(100% 100% 135deg),
            oklch(100% 100% 180deg),
            oklch(100% 100% 225deg),
            oklch(100% 100% 270deg),
            oklch(100% 100% 315deg),
            oklch(100% 100% 360deg)) border-box;
}

.ControlArea {
    margin: 0 var(--common-gap) var(--common-gap) var(--common-gap);
}

.ControlPanel {
    background-color: black;
    color: white;
    height: 100%;
    border-radius: var(--common-radius);
    display: flex;
    justify-content: center;
    align-items: center;
}

.ArrowUp {
    /* display: none !important; */
    width: 0.8rem;
    height: 0.8rem;
    border-width: 0.2rem 0.2rem 0 0;
    border-style: solid;
    position: absolute;
    display: inline-block;
    vertical-align: middle;
    color: #e7dc4b;
    box-sizing: border-box;
    top: -0.92rem;
    left: 50%;
    transform: translateX(-50%) rotate(-45deg);
    scale: 0.6;
}

.ArrowUp::before {
    right: 0;
    top: -0.125rem;
    position: absolute;
    height: 0.2rem;
    box-shadow: inset 0 0 0 1rem;
    transform: rotate(-45deg);
    width: 0.9rem;
    transform-origin: right top;
}

.ArrowUp::before,
.ArrowUp::after {
    content: "";
    box-sizing: border-box;
}

.NFCInput {
    background-color: transparent;
    position: absolute;
    bottom: 0;
    left: 0;
    width: 1px;
    height: 1px;
    border: none;
    outline: none;
}

.Page {
    position: relative;
}